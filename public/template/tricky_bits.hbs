<section>
  <h3>Tricky Bit #1: Handlebars</h3>
  <p>If you're like me, you really dislike having a butt-load of templates defined in your index.html file. When your app scales beyond To-Dos, it starts to get really annoying. Fortunately, you can define your templates in separate files, and use the supplied <code>hbs</code> plugin for <code>requirejs</code>. Here's an example usage from the <code>TrickyBitsView.js</code> file used on this page:</p>

<div class="highlight"><pre><span class="nx">define</span><span class="p">([</span>
  <span class="s1">&#39;ember&#39;</span><span class="p">,</span>
  <span class="s1">&#39;hbs!tricky_bits&#39;</span>
<span class="p">],</span>
<span class="kd">function</span><span class="p">(</span><span class="nx">Ember</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">OtherView</span> <span class="o">=</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">View</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
    <span class="nx">templateName</span><span class="o">:</span> <span class="s1">&#39;tricky_bits&#39;</span>
  <span class="p">});</span>
  <span class="k">return</span> <span class="nx">OtherView</span><span class="p">;</span>
<span class="p">});</span>
</pre></div>

  <p>Behind the scenes, the <code>hbs</code> plugin fetches your template file, compiles it with <code>Ember.Handlebars</code> and adds a reference to the compiled template to <code>Ember.TEMPLATES</code>. Instances of <code>Ember.View</code> can then look up your compiled template by filename using the <code>templateName</code> property.</p>

  <h3>Tricky Bit #2: Grunt and Jasmine</h3>
  <p><a href="http://pivotal.github.com/jasmine">Jasmine</a> is a great way to test your Javascript, but using Jasmine with your AMD app isn't completely straight-forward. I've modified <a href="https://github.com/jasmine-contrib/grunt-jasmine-runner">grunt-jasmine-runner</a> to work correctly with AMD apps, and configured <code>grunt.js</code> to run Jasmine specs from the <code>test/spec</code> folder. Accessing components from your specs is super-easy:</p>

<div class="highlight"><pre><span class="nx">define</span><span class="p">([</span>
  <span class="s1">&#39;ember&#39;</span><span class="p">,</span>
  <span class="s1">&#39;jquery&#39;</span><span class="p">,</span>
  <span class="s1">&#39;IndexView&#39;</span><span class="p">,</span>
  <span class="s1">&#39;hbs!template/application&#39;</span>
<span class="p">],</span>
<span class="kd">function</span><span class="p">(</span><span class="nx">Ember</span><span class="p">,</span> <span class="nx">$</span><span class="p">,</span> <span class="nx">IndexView</span><span class="p">,</span> <span class="nx">applicationTemplate</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">describe</span><span class="p">(</span><span class="s2">&quot;hbs!&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">it</span><span class="p">(</span><span class="s2">&quot;should be able to fetch and compile templates&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="nx">expect</span><span class="p">(</span><span class="nx">applicationTemplate</span><span class="p">).</span><span class="nx">toBeDefined</span><span class="p">();</span>
      <span class="nx">expect</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">applicationTemplate</span><span class="p">).</span><span class="nx">toEqual</span><span class="p">(</span><span class="s1">&#39;function&#39;</span><span class="p">);</span>
    <span class="p">});</span>
  <span class="p">});</span>

  <span class="kd">var</span> <span class="nx">$container</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span><span class="s1">&#39;&lt;div&gt;&#39;</span><span class="p">);</span>
  <span class="kd">var</span> <span class="nx">indexView</span><span class="p">;</span>

  <span class="nx">describe</span><span class="p">(</span><span class="s2">&quot;IndexView&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">beforeEach</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="nx">indexView</span> <span class="o">=</span> <span class="nx">IndexView</span><span class="p">.</span><span class="nx">create</span><span class="p">();</span>
      <span class="nx">indexView</span><span class="p">.</span><span class="nx">appendTo</span><span class="p">(</span><span class="nx">$container</span><span class="p">);</span>
    <span class="p">});</span>

    <span class="nx">afterEach</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="nx">indexView</span><span class="p">.</span><span class="nx">remove</span><span class="p">();</span>
      <span class="nx">$container</span><span class="p">.</span><span class="nx">html</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">);</span>
    <span class="p">});</span>

    <span class="nx">it</span><span class="p">(</span><span class="s2">&quot;should successfully render&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="nx">expect</span><span class="p">(</span><span class="nx">$container</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;*&#39;</span><span class="p">).</span><span class="nx">length</span><span class="p">).</span><span class="nx">toBeGreaterThan</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
    <span class="p">});</span>
  <span class="p">});</span>
<span class="p">});</span>
</pre></div>

</section>
